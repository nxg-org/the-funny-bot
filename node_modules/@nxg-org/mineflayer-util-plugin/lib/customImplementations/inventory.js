"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomInventoryFunctions = void 0;
const assert_1 = __importDefault(require("assert"));
const util_1 = require("util");
const sleep = (0, util_1.promisify)(setTimeout);
const QUICK_BAR_COUNT = 9;
const QUICK_BAR_START = 36;
let nextQuickBarSlot = 0;
//lazy. will fix this later.
class CustomInventoryFunctions {
    constructor(bot) {
        this.bot = bot;
        this.armorSlots = {
            head: 5,
            torso: 6,
            legs: 7,
            feet: 8,
        };
        if (!bot.supportFeature("doesntHaveOffHandSlot")) {
            this.armorSlots["off-hand"] = 45;
        }
    }
    equip(item, destination) {
        return __awaiter(this, void 0, void 0, function* () {
            if (item == null || typeof item !== "object") {
                throw new Error("Invalid item object in equip (item is null or typeof item is not object)");
            }
            if (!destination || destination === null) {
                destination = "hand";
            }
            const sourceSlot = item.slot;
            let destSlot = this.getDestSlot(destination);
            if (sourceSlot === destSlot) {
                // don't need to do anything
                return;
            }
            if (destination !== "hand") {
                yield this.bot.moveSlotItem(sourceSlot, destSlot);
                return;
            }
            if (destSlot >= QUICK_BAR_START &&
                destSlot < QUICK_BAR_START + QUICK_BAR_COUNT &&
                sourceSlot >= QUICK_BAR_START &&
                sourceSlot < QUICK_BAR_START + QUICK_BAR_COUNT) {
                // all we have to do is change the quick bar selection
                this.bot.setQuickBarSlot(sourceSlot - QUICK_BAR_START);
                return;
            }
            // find an empty slot on the quick bar to put the source item in
            destSlot = this.bot.inventory.firstEmptySlotRange(QUICK_BAR_START, QUICK_BAR_START + QUICK_BAR_COUNT);
            if (destSlot == null) {
                // LRU cache for the quick bar items
                destSlot = QUICK_BAR_START + nextQuickBarSlot;
                nextQuickBarSlot = (nextQuickBarSlot + 1) % QUICK_BAR_COUNT;
            }
            this.setQuickBarSlot(destSlot - QUICK_BAR_START);
            yield this.bot.moveSlotItem(sourceSlot, destSlot);
        });
    }
    setQuickBarSlot(slot) {
        assert_1.default.ok(slot >= 0);
        assert_1.default.ok(slot < 9);
        if (this.bot.quickBarSlot === slot)
            return;
        this.bot.quickBarSlot = slot;
        this.bot._client.write("held_item_slot", {
            slotId: slot,
        });
        this.bot.updateHeldItem();
    }
    getDestSlot(destination) {
        if (destination === "hand") {
            return QUICK_BAR_START + this.bot.quickBarSlot;
        }
        else {
            const destSlot = this.armorSlots[destination];
            assert_1.default.ok(destSlot != null, `invalid destination: ${destination}`);
            return destSlot;
        }
    }
}
exports.CustomInventoryFunctions = CustomInventoryFunctions;

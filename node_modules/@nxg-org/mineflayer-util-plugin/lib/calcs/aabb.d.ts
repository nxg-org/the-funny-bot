import { Vec3 } from "vec3";
declare type AABBPoints = [minX: number, minY: number, minZ: number, maxX: number, maxY: number, maxZ: number];
declare type MinAndMaxPoints = [min: [x: number, y: number, z: number], max: [x: number, y: number, z: number]];
declare type Vec3AABB = [min: Vec3, max: Vec3];
export declare class AABB {
    minX: number;
    minY: number;
    minZ: number;
    maxX: number;
    maxY: number;
    maxZ: number;
    constructor(x0: number, y0: number, z0: number, x1: number, y1: number, z1: number);
    static fromVecs(min: Vec3, max: Vec3): AABB;
    static fromBlock(min: Vec3): AABB;
    set(x0: number, y0: number, z0: number, x1: number, y1: number, z1: number): void;
    clone(): AABB;
    toArray(): AABBPoints;
    toMinAndMaxArrays(): MinAndMaxPoints;
    toVecs(): Vec3AABB;
    toVertices(): Vec3[];
    floor(): this;
    extend(dx: number, dy: number, dz: number): this;
    contract(x: number, y: number, z: number): this;
    expand(x: number, y: number, z: number): this;
    offset(x: number, y: number, z: number): this;
    computeOffsetX(other: AABB, offsetX: number): number;
    computeOffsetY(other: AABB, offsetY: number): number;
    computeOffsetZ(other: AABB, offsetZ: number): number;
    intersects(other: AABB): boolean;
    xzIntersectsRay(org: Vec3, dir: Vec3): {
        x: number;
        z: number;
    } | null;
    intersectsRay(org: Vec3, dir: Vec3): Vec3 | null;
    xzIntersectsSegment(org: Vec3, dest: Vec3): {
        x: number;
        z: number;
    } | null;
    intersectsSegment(org: Vec3, dest: Vec3): Vec3 | null;
    distanceFromRay(origin: Vec3, direction: Vec3, xz?: boolean): number;
    intersect(aABB: AABB): AABB;
    equals(other: AABB): boolean;
    xzDistanceToVec(pos: Vec3): number;
    distanceToVec(pos: Vec3): number;
    expandTowards(vec3: Vec3): AABB;
    expandTowardsCoords(d: number, d2: number, d3: number): AABB;
    moveCoords(d: number, d2: number, d3: number): AABB;
    move(vec3: Vec3): AABB;
    intersectsCoords(d: number, d2: number, d3: number, d4: number, d5: number, d6: number): boolean;
    collidesAABB(aABB: AABB): boolean;
    collidesCoords(d: number, d2: number, d3: number, d4: number, d5: number, d6: number): boolean;
    getCenter(): Vec3;
}
export default AABB;

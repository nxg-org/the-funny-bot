/// <reference types="node" />
import type { Bot, PrioGroups } from "mineflayer";
import { EntityFunctions } from "./entityFunctions";
import { FilterFunctions } from "./filterFunctions";
import { InventoryFunctions } from "./inventoryFunctions";
import { MovementFunctions } from "./movementFunctions";
import { PredictiveFunctions } from "./predictiveFunctions";
import { MathFunctions } from "./mathUtil";
import { WorldFunctions } from "./WorldFunctions";
import { RayTraceFunctions } from "./rayTracingFunctions";
export declare type BuiltInPriorityOptions = {
    group: PrioGroups;
    priority: number;
    returnIfRunning?: boolean;
    errCancel?: boolean;
};
export declare type CustomPriorityOptions = {
    priority: number;
    group?: PrioGroups;
    returnIfRunning?: boolean;
    errCancel?: boolean;
};
export declare class UtilFunctions {
    bot: Bot;
    inv: InventoryFunctions;
    move: MovementFunctions;
    entity: EntityFunctions;
    predict: PredictiveFunctions;
    filters: FilterFunctions;
    math: MathFunctions;
    world: WorldFunctions;
    raytrace: RayTraceFunctions;
    private builtInsPriorityStore;
    private customPriorityStore;
    private builtInCurrentExecuting;
    private customCurrentExecuting;
    constructor(bot: Bot);
    sleep: typeof import("timers/promises").setTimeout;
    isBuiltInsEmpty(name?: string): boolean;
    isCustomEmpty(name?: string): boolean;
    /**
     *
     * @param object \{priority, errCancel} => priority of function (highest order first), throw error if already running a function.
     * @param func any custom function.
     * @param args the arguments of passed in function.
     * @returns Error if errCancel and already executing, otherwise result of function.
     */
    customPriority<K extends (...args: any) => any>({ priority, group, returnIfRunning, errCancel }: CustomPriorityOptions, func: K, ...args: Parameters<K>): number | Promise<ReturnType<K> | Error>;
    builtInsPriority<K extends (...args: any) => any>({ group, priority, returnIfRunning, errCancel }: BuiltInPriorityOptions, func: K, ...args: Parameters<K>): number | Promise<ReturnType<K> | Error>;
}

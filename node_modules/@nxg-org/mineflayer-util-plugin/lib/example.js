"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
const mineflayer_1 = require("mineflayer");
const index_1 = __importDefault(require("./index"));
const vec3_1 = require("vec3");
let target;
const bot = (0, mineflayer_1.createBot)({
    username: "utilTesting",
    host: (_a = process.argv[2]) !== null && _a !== void 0 ? _a : "localhost",
    port: (_b = Number(process.argv[3])) !== null && _b !== void 0 ? _b : 25565,
    version: "1.17.1",
});
bot.loadPlugin(index_1.default);
const emptyVec = new vec3_1.Vec3(0, 0, 0);
bot.on("chat", (username, message) => __awaiter(void 0, void 0, void 0, function* () {
    var _c;
    const split = message.split(" ");
    switch (split[0]) {
        case "look":
            target = bot.nearestEntity((e) => { var _a; return ((_a = e.username) !== null && _a !== void 0 ? _a : e.name) === split[1]; });
            if (!target)
                return console.log("no entity");
            bot.util.move.forceLookAt(target.position, true);
            break;
        case "equip":
            const item = bot.util.inv.getAllItems().find((i) => i.name.includes(split[1]));
            if (!item)
                return console.log("no item");
            if (["hand", "off-hand"].includes(split[2])) {
                bot.util.inv.customEquip(item, split[2]);
            }
            break;
        case "health":
            const health = bot.util.entity.getHealth();
            bot.chat(`${health}`);
            break;
        case "WhatAmILookingAt":
            target = bot.nearestEntity((e) => { var _a; return ((_a = e.username) !== null && _a !== void 0 ? _a : e.name) === username; });
            if (!target)
                return console.log("no entity");
            const player = bot.util.raytrace.entityAtEntityCursor(target, 256);
            if (player) {
                console.log(player);
                bot.chat(`${(_c = player.username) !== null && _c !== void 0 ? _c : player.name} at ${player.position}`);
            }
            else {
                const block = bot.util.raytrace.blockAtEntityCursor(target, 256); //includes face and intersect. That's very nice.
                if (block) {
                    console.log(block);
                    bot.chat(`${block.name} at ${block.position}`);
                }
                else {
                    bot.chat("You're not looking at anything.");
                }
            }
            break;
        case "come":
            target = bot.nearestEntity((e) => { var _a; return ((_a = e.username) !== null && _a !== void 0 ? _a : e.name) === username; });
            if (!target)
                return console.log("no entity");
            if (!bot.pathfinder)
                bot.chat("pathfinder is not loaded!");
            bot.util.move.followEntityWithRespectRange(target, 1);
            break;
        case "follow":
            target = bot.nearestEntity((e) => { var _a; return ((_a = e.username) !== null && _a !== void 0 ? _a : e.name) === split[1]; });
            if (!target)
                return console.log("no entity");
            if (!bot.pathfinder)
                bot.chat("pathfinder is not loaded!");
            bot.util.move.followEntityWithRespectRange(target, 1);
            break;
        case "stop":
            if (!bot.pathfinder)
                bot.chat("pathfinder is not loaded!");
            bot.util.move.stop();
            break;
        default:
            console.log(username, bot.entity.username);
            if (username !== bot.entity.username)
                bot.chat("unknown command: " + message);
            break;
    }
}));
